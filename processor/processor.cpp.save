#include "..\stack\stack.h"
#include "..\strings\string_funk.h"
#include "..\hamlet\d_hamlet_functions.h"
#include "processor.h"
#include <stdio.h>


line_buf* get_code (char* file_name, size_t* lines_num)
    {
    assert (file_name != NULL);
    assert (lines_num != NULL);

    line_buf* code = NULL;

    code = get_strings (file_name, lines_num);

    return code;
    }


int* create_binary_arr (line_buf* code, size_t lines_num)
    {
    int* binary = (int*) calloc (lines_num, sizeof (int) * (1 + MAX_ARGS_NUM));
    int* begunok = binary;

    for (size_t line_id = 0; line_id < lines_num; line_id++)
        {
        parsed_line code_line = string_delimit (code[line_id].beg_ptr, ' ');
        int cmd_id = cmd_analyze (code_line.words_ptr);

        // Write command id
        *begunok++ = cmd_id;

        // Write argument
        if (cmd_id == PUSH)
            {
            int arg = 0;

            if (sscanf (apply_to (&code_line, 2), "%d", &arg))
                {
                *begunok++ = arg;
                }
            else
                {
                printf ("%d: Wrong argument\n", line_id);
                }
            }
        }

    size_t real_size = begunok - binary;

    binary = realloc (binary, real_size * (int));

    return binary;
    }
    


cmd_enum cmd_analyze (char* cmd)
    {
    if (string_equal (cmd, "push"))
        {
        return PUSH;
        }
    else if (string_equal (cmd, "pop"))
        {
        return POP;
        }
    else if (string_equal (cmd, "add"))
        {
        return ADD;
        }
    else
        {
        return UNKNOW_CMD;
        }
    }
