#include <stdio.h>
#include "processor.h"
// #include "proc_defines.cpp"

#define LOG_NEW_LINE putc ('\n', prc->prc_log)

#ifdef PROC
int main ()
    {
    size_t bin_size = 0;

    FILE* bin = fopen ("binary_my_binary", "rb");
    FILE* log = fopen ("stack_log.txt", "w");
    FILE* prc_log = fopen ("prc_log.txt", "w");

    puts ("Fire: Get Ready!");

    /* for (size_t byte_id = 0; byte_id < sizeof (bin_info); byte_id++)
        {
        printf ("%d ", getc (bin));
        }

    puts ("Fire: Ogon'!");     */

    bin_info ma_bin = {0, 0, 0};
    fread (&ma_bin, sizeof (int), 3, bin);
    char* ptr = (char*) &ma_bin;

    for (size_t byte_id = 0; byte_id < sizeof (bin_info); byte_id++)
        {
        printf ("%d ", *ptr++);
        }

    printf ("%x ", ma_bin.siganture);

    assert (ma_bin.signature == MY_SIGN);
    assert (ma_bin.version == version);

    bin_size = ma_bin.bin_size;

    int* cooking_list = (int*) calloc (bin_size, sizeof (int));
    fread (cooking_list, sizeof (int), bin_size, bin);

    proc prc;
    proc_ctor (&prc, bin_size, cooking_list, log, prc_log);

    doer (&prc);

    fclose (bin);
    fclose (log);
    fclose (prc_log);

    // stop_inst_console_close ();
    }
#endif
